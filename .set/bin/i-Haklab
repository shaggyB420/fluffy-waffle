#!/usr/bin/bash
#Created on Dec/2018 and upgraded on Ago/2021 by @Ivam3
IFS=$'\n\t'
trap ctrl_c 2
[[ $(basename $0) != i-Haklab ]] && { mv $HOME/.local/bin/$(basename $0) $HOME/.local/bin/i-Haklab;exit;}
source $HOME/.local/share/i-Haklab/.set/var/variables
source $iHAKLAB/.set/functions/functions
ctrl_c(){ printf "$Y\n\n\t\t   [¿] Need a help [?]$B\n\t\tTelegram : t.me/Ivam3_Bot$W\n\n";exit;}
chk-iHaklab
chk-Cuser
[ $# -eq 0 ] && { printf >&2 "$R(_➤)$W missing argument, type $(basename $0) -h for help";exit;}
clear;banner
case "$1" in
	-h|help)
		Menu
		;;
	-v|version)
		printf "$G(_➤)$W i-Haklab $(grep -om 1 "v.*.*" $iHAKLAB/README.md|awk '{print $1}') 2021 by Ivam3 - It is a hacking laboratory that contains open source tools recommended by Ivam3."
		;;
	about)
		[[ -e $iHAKLAB/.set/libexec/Tools/Readme/$2 ]] && cat $iHAKLAB/.set/libexec/Tools/Readme/$2 || STDERR
		;;
	install|remove)
		if [[ $2 ]];then
			for i in ${@:2};do
				if [[ $2 = "alltools" ]]
				then
					alltools=$(cat $iHAKLAB/.set/libexec/Tools/listoftools)
					for i in ${alltools[*]};do
						bash <(curl -fsSL "${iHDB}/share/$1") $i
					done
					exit
				elif [[ $(grep "$i" $iHAKLAB/.set/libexec/Tools/listoftools) ]]
				then
					bash <(curl -fsSL "${iHDB}/share/$1") $i
				else
						printf >&2 "$R(_➤)$W Tool $i doesn't exist in i-Haklab$Y\n ╰─➤$W Trying APT repositories...\n"
						yes|apt $1 $i
				fi
			done
			if [[ -e $PREFIX/etc/apt/sources.list.d/abhacker.repo.list ]]
			then
				rm -rf $PREFIX/etc/apt/sources.list.d/abhacker.repo.list
			fi
	  inactive(){
			if [[ $(ruby -v |cut -c 6-10) != "2.7.2" ]]
			then
				printf "$Y\n(_➤)$W Downgrading ruby at version 2.7.2.."
				bash <(curl -fsSL "http://git.io/abhacker-repo") --install ruby=2.7.2
				if [ ! -e $PREFIX/etc/apt/sources.list.d/abhacker.repo.list ]
				then
					printf "$Y\n(_➤)$W Installing Abhacker repositories..$G"
					wget -q "${iHDB}/fix-tools/instAbhackerRepo" -O $TMPDIR/abh.tmp
					chmod +x $TMPDIR/abh.tmp
					exec $TMPDIR/abh.tmp --install ruby=2.7.2 >/dev/null 2>/dev/null
					rm $TMPDIR/abh.tmp
					printf "$G(_➤)$W DONE!!\n"
				else
					exec yes|apt install ruby=2.7.2 >/dev/null 2>/dev/null
				fi
				gem install --quiet --silent bundler:2.2.11
				rm -rf $PREFIX/lib/ruby/gems/2.7.0/specifications/default/bundler-2.1.4.gemspec
				printf "$G.DONE!!$W\n"
			fi
		}
		else
			STDERR
		fi
		;;
	restore)
		printf "$Y(_➤)$W Restoring (It could take a while)..";
		rm -rf $iHAKLAB
		git clone --quiet https://github.com/Ivam3/i-Haklab $iHAKLAB
		if [[ -d $iHAKLAB ]];then
			chmod +x -R $iHAKLAB
			printf "$G. DONE!!$W\n"
		else
			printf "$R\n(_➤) ERR_restore";ctrl_c
		fi
		;;
	reinstall)
		printf "$Y(_➤)$W Downloading i-Haklab (It could take a while)..."
		[[ -d $HOME/i-Haklab ]] && rm -rf $HOME/i-Haklab
		git clone --quiet https://github.com/ivam3/i-Haklab $HOME/i-Haklab
		chmod 750 -R $HOME/i-Haklab/*;cd $HOME/i-Haklab
		bash setup
		;;
	root)
		command -v proot >/dev/null || { yes|apt install proot;clear;}
		exec proot -0 -w ~ termux-chroot $SHELL
		;;
	show)
		[[ $2 ]] && bash $iHAKLAB/.set/share/$1 ${@:2} || STDERR
		;;
	speedtest)
		command -v python >/dev/null || yes|apt install python >/dev/null 2>&1
		command -v speedtest-cli >/dev/null || python -m pip install --no-color --quiet --no-cache-dir speedtest-cli
		printf "$Y(_➤)$W Running speed test.\n"
		speedtest-cli
		;;
	update)
		TMP_FILE1=$(mktemp)
		wget -q $iHDB/share/upgrade -O $TMP_FILE1
		RMONTH=$(grep "Modify" $TMP_FILE1 | cut -d "-" -f2)
		RDAY=$(grep "Modify" $TMP_FILE1 | cut -d "-" -f3)
		LMONTH=$(stat $iHAKLAB | grep Modify | awk '{print $2}' | cut -d "-" -f2)
		LDAY=$(stat $iHAKLAB | grep Modify | awk '{print $2}' | cut -d "-" -f3)
		Done(){ printf "$G\n\t    (_>)─>$W Already up to date$G <-(<_)$W\n";}
		if [[ $LMONTH -eq $RMONTH ]];then
			if [[ $LDAY -gt $RDAY ]];then
				Done
			else
				printf "$green(_➤)$W Upgrading i-Haklab...\n"
				bash $TMP_FILE1
				Done
			fi
		elif [[ $LMONTH -gt $RMONTH ]]; then
			Done
		else
			printf "$Y(_➤)$W Upgrading i-Haklab...\n"
			bash $TMP_FILE1
			Done
		fi
		rm $TMP_FILE1
		;;
	weechat)
		command -v weechat >/dev/null 2>&1 || yes|apt install weechat
		command -v openssl >/dev/null 2>&1 || yes|apt install openssl-tool
		if [[ ! -e ~/.weechat/certs/freenode.pem ]];then
			printf "$Y(_>)─>$W Before starting got to create a username and password in irc.com/login/sso\n$Y ╰────➤$W press$G enter$W to continue or$R ctrl_c$W to abort it";read enter
			openssl req -x509 -new -newkey rsa:4096 -sha256 -days 1096 -nodes -out freenode.pem -keyout freenode.pem
			mkdir -p ~/.weechat/certs;mv freenode.pem ~/.weechat/certs
printf "$Y(_>)─>$W if this is your first time using weechat: after start weechat type the next commands$Y
 ╰────➤$W otherwise,$R ignore it$Y
        /server add -auto -ssl -ssl_cert ~/.weechat/certs/freenode.pem -network freenode chat.freenode.net 6697
	/server add freenode chat.freenode.net/6697 -ssl --autoconnect
	/set irc.server.freenode.addresses \"chat.freenode.net/6697\"
	/set irc.server.freenode.ssl on
	/set irc.server.freenode.sasl_mechanism PLAIN
	/set irc.server.freenode.sasl_username <nickname>
	/set irc.server.freenode.sasl_password <password>
	/save
	/secure passphrase <passphrase>
	/secure set freenode_password <password>
	/set irc.server.freenode.sasl_password \"\${sec.data.freenode_password}\"
	/set irc.server.freenode.autojoin #Ivam3byCinderella
	/connect freenode
	/join #Ivam3byCinderella$G\n\n                 Press enter to start$W\n"
	                read enter
		else
			printf "$Y(_➤)$W After weechat started type the command :$G /connect freenode$W\n                 Press$G enter$W to start$W\n";read enter
		fi
		weechat;k-boom
		;;
	#:::AUTOMATED COMMAND:::#
	bf|esmsg|forwarding|msf|payvid|phonescan|ransomux|share)
		bash $iHAKLAB/.set/share/$1 ${@:2}
		;;
	*)
		STDERR
		;;
esac
